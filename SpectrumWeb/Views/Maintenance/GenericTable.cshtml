
@{
    @using SpectrumWeb.Controllers.ControllerCommon;
}
<h2 style="color:maroon;text-align:center">@ViewBag.Title</h2>

<script type="text/javascript" language="javascript" src="/local/common.js"></script>

@Html.Raw(@ViewBag.ClassDefnScript)

<style>
th {
    text-align:center;
    margin-top:auto;
    margin-bottom:auto;
}

tbody tr {
    padding-left:2px;
    padding-right:2px;
}
 .dataTables_wrapper
 {
     margin-left:64px;
     text-align:left;
     float:none;
 }

#hoursAtInstallFooter input {
  width: 48px;
}

</style>
<script>

var table;

const classMap = new Map();

//$(document).ready(window.alert("Table = " + table));

document.addEventListener('DOMContentLoaded', function () {
    initializeClassMap();
    //buildclassTableBody();
   

    $('#classTable tfoot th').each(function () {
        var title = $(this).text();
        $(this).html('<input type="text" placeholder="Filter ' + title + '" />');
    });
    
    editor = new $.fn.dataTable.Editor( {
    
        table: "#classTable",
            fields: [
                @Html.Raw(@ViewBag.TableFields)
            ]
    } );

    editor.on('preSubmit', function (e, data, action) {
        console.log('preSubmit, action = ' + action);
        console.log('preSubmit, data=' + data.data);

        let request = new XMLHttpRequest;

        request.open('POST', '/GenericTable/GenericUpdater', false);

        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

        let jdata=JSON.stringify(data.data);

        console.log('preSubmit, jdata=' + jdata);

        request.send('action=' + action + '&data=' + jdata);

        let response = request.responseText;

        console.log('preSubmit, response=' + response);

        return true;
    });

    let table = new DataTable('#classTable', {
    
        dom: 'Bfrtip',
        select: true,
        buttons: [
            'copy', 'csv', 'excel',
            { extend: 'pdf',
              orientation: 'landscape'},
            'print', 'searchBuilder',
            { extend: "create", editor: editor },
	        { extend: "edit",   editor: editor },
	        { extend: "remove", editor: editor } 
        ],

        columns: [
           @Html.Raw(@ViewBag.TableColumns)
        ],
        initComplete: function () {
            
            // Apply the search
            this.api()
                .columns()
                .every(function () {
                    var that = this;
 
                    $('input', this.footer()).on('keyup change clear', function () {
                        if (that.search() !== this.value) {
                            that.search(this.value).draw();
                        }
                    });
                });

            }
        });


    table.on('click', 'td.dt-control', function (e) {
        let tr = e.target.closest('tr');
        let row = table.row(tr);
        if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
        }
        else {
            // Open this row
            row.child(format(row.data())).show();
        }
    });

        function format(d) {
            //console.log("format=" + JSON.stringify(d));
            let childElements =  @Html.Raw(ViewBag.ChildRows);

            //console.log("format.type="+typeof(childElements));
           // console.log("format='" + @Html.Raw(ViewBag.ChildRows) + "'");
            //console.log("format=" + childElements);
            //console.log("childElements[0]=" + childElements[0]);

            //let fieldValue1 = d['Notes'];


            let rtrnValu = '<dl>'
           
            for (let i = 0; i < childElements.length; i++) {

                rtrnValu += '<dt>' + childElements[i][0] + '</dt>';
                rtrnValu += '<dd style="height:' + childElements[i][2] + 'px">' + d[childElements[i][1]] + '</dd>';
            }

            rtrnValu += '</dl>';
            

           console.log(rtrnValu);

            return(rtrnValu);

            //return (
            //    '<dl>' +
            //    '<dt>' + childElements[1][0] + '</dt>' +
            //    '<dd style="height:120px">' +
            //    d[childElements[1][1]] +
            //    '</dd>' +
            //    '</dl>'
            //);
        }

    });
   
    new $.fn.dataTable.Buttons( table, {
        buttons:[
        {
            extend: 'searchBuilder',
            config: {
                depthLimit: 4
            }
        }
        ],
    } );

function initializeClassMap()
{
    @Html.Raw(@ViewBag.ClassMapInitializer)
    // classMap.forEach(function(val)
    //{
    //    console.log(val.DateEntered);
    //});
}
</script>

<div style="height:32px"></div>

<table id="classTable" class="table table-striped table-bordered table-hover" style="table-layout:fixed;float:left;@ViewBag.TableWidth">
    <thead>
        <tr>
            @Html.Raw(@ViewBag.TableHeader)
        </tr>
    </thead>
    <tfoot>
        <tr>
            @Html.Raw(@ViewBag.TableFooter)
        </tr>
    </tfoot>

    <tbody id='classTableBody'>      
        @Html.Raw(@ViewBag.ClassTableBody)
    </tbody>
                
</table>

<script>

function buildclassTableBody(){
    
    @Html.Raw(ViewBag.TableBodyBuilder)
    
 
}

</script>
